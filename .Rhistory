xlim(c(-10000,500000))+
theme_bw()+
theme(legend.position = "none")
LongPlot
LongPlot<-ggplot()+
geom_boxplot(data=NearestDistancesClean, aes(x=mindist,
y=pair,
fill=pair),
fill = "#023858")+
geom_vline(xintercept=median(NearestDistancesClean$mindist),
color="#bd0026",
linewidth=1.5, alpha=.4)+
geom_boxplot(data=PairDistancesDf,
aes(x=distance,
y=pair,
fill= pair))+
xlim(c(-10000,500000))+
xlab("Distance (bp)")
theme_bw()+
theme(legend.position = "none",
axis.text = element_text(family="ArielMT", size=12),
axis.title = element_text(family = "ArielMT"))
LongPlot
LongPlot<-ggplot()+
geom_boxplot(data=NearestDistancesClean, aes(x=mindist,
y=pair,
fill=pair),
fill = "#023858")+
geom_vline(xintercept=median(NearestDistancesClean$mindist),
color="#bd0026",
linewidth=1.5, alpha=.4)+
geom_boxplot(data=PairDistancesDf,
aes(x=distance,
y=pair,
fill= pair))+
xlim(c(-10000,500000))+
xlab("Distance (bp)")+
theme_bw()+
theme(legend.position = "none",
axis.text = element_text(family="ArielMT", size=12),
axis.title = element_text(family = "ArielMT"))
LongPlot
ggsave("EcoliEnter_AllPositive_long_barplot.png",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.svg",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
Allp1<-ggplot(NearestDistancesClean, aes(x=mindist,
after_stat(count*100/sum(count))))+
geom_histogram(bins=100,
alpha = 0.7, fill = "#023858",color = "#023858")+
geom_vline(xintercept=median(NearestDistancesClean$mindist),
color="#bd0026",
linewidth=1.5)+
ylab("% of all distances")+
xlab("Distance (bp)")+
ggtitle("All")+
scale_x_continuous(limits= c(-30000,2000000))+
theme_classic()+
theme(axis.text = element_text(family="ArielMT", size=12),
axis.title = element_text(family = "ArielMT"),
title = element_text(family="ArielMT"))
Allp1
AllPairsPlotp1<-ggplot(PairDistancesDf, aes(x=distance,
after_stat(count*100/sum(count))))+
geom_histogram(bins=100,
alpha = 0.7,
fill = "#023858",color = "#023858")+
geom_vline(xintercept=median(PairDistancesDf$distance),
color="#bd0026",
linewidth=1.5)+
ylab("% of all distances")+
xlab("Distance (bp)")+
ggtitle("Co-occuring pairs")+
scale_x_continuous(limits= c(-30000,2000000))+
theme_classic()+
theme(axis.text = element_text(family="ArielMT", size=12),
axis.title = element_text(family = "ArielMT"),
title = element_text(family="ArielMT"))
AllPairsPlotp1
AllPairsPlotCombined<-ggarrange(Allp1,
AllPairsPlotp1,
nrow=2,
align="v")
AllPairsPlotCombined
ggsave("EcoliEnterAllPositive_vs_allclosest.png",
path=folderForOutput,
AllPairsPlotCombined, width=20, height=15, units="cm",
dpi=300)
ggsave("EcoliEnterAllPositive_vs_allclosest.svg",
path=folderForOutput,
AllPairsPlotCombined, width=20, height=15, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.png",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.svg",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.png",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.svg",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.png",
path=folderForOutput,
LongPlot, width=20, height=40, units="cm",
dpi=300)
ggsave("EcoliEnter_AllPositive_long_barplot.svg",
path=folderForOutput,
LongPlot, width=10, height=40, units="cm",
dpi=300)
SystemsMedian<-PairDistancesDf %>% group_by(System.I,System.II) %>%
summarize(median=median(distance),
count = length(distance),
test=wilcox.test(distance,NearestDistancesClean$mindist, alternative="less")$p.value)
SystemsSignif<-subset(SystemsMedian, SystemsMedian$test*length(SystemsMedian$System.I) < 0.001 &
SystemsMedian$count > 10)
write_xlsx(SystemsSignif, path=paste("../data/cooccurence_vs_genome_distance/PositiveSystemsSignifCloser.xlsx", sep="/"))
ForPlotSubset<-subset(PairDistancesDf, paste(PairDistancesDf$System.I,PairDistancesDf$System.II) %in%
paste(SystemsSignif$System.I,SystemsSignif$System.II))
p2<-ggplot(ForPlotSubset,
aes(x=distance, fill= paste(System.I, System.II)))+
geom_histogram(position="identity", alpha=.5, binwidth=10000)+
geom_vline(xintercept=median(NearestDistancesClean$mindist))+
facet_wrap(~pair, scales = "free_y")+
xlim(c(-10000,500000))+
theme_bw()+
theme(legend.position = "none")
p2
DrawPairTree<-function(sysI,sysII){
#sysI<-"Zorya II"
#sysII<-"Druantia III"
#subset initial system locations
PairSystemLocationLong<-subset(SystemsLocationEcoli,
SystemsLocationEcoli$defense_system2 %in% c(sysI,sysII))[,c("genome","seqid","defense_system2")]
PairSystemLocationLongForTree<-PairSystemLocationLong %>%
group_by(genome) %>%
dplyr::summarise(system2 = ifelse(length(unique(defense_system2))>1,"both",defense_system2),
system = ifelse(length(unique(defense_system2))>1,0,
ifelse(defense_system2[1] == sysI,1,2)),
chromosomes2= ifelse(length(unique(seqid))>1,"different","same"),
chromosomes = ifelse(length(unique(seqid))>1,0,1))
names(PairSystemLocationLongForTree)[1]<-"label"
#subset distances
SelectedPairDistances<-subset(PairDistancesDf, PairDistancesDf$System.I %in% c(sysI,sysII) &
PairDistancesDf$System.II %in% c(sysI,sysII))[,c("genome","seqid","plasmid","distance")]
SelectedPairDistances$logdist<-log10(SelectedPairDistances$distance)
SelectedPairDistances$plasmid2<-ifelse(SelectedPairDistances$plasmid == 1, "plasmid", "chromosome")
names(SelectedPairDistances)[1]<-"label"
#subset tree
LeavesToKeep<-unique(SystemsLocationEcoli$genome)
subtree<-get_subtree_with_tips(tree, only_tips = LeavesToKeep)$subtree
#draw tree
EcolFromEnterDataSubtree<-ggtree(subtree, size =0.1, color = "#525252")
PairPlot<-EcolFromEnterDataSubtree +
geom_facet(data=PairSystemLocationLongForTree,
panel="system",
geom=geom_tile,
mapping = aes(x=system, fill=system2),
width=0.7) +
scale_fill_manual(values = c("#6a3d9a","#e31a1c","#1f78b4"),na.value="white")+
new_scale_fill()+
##
geom_facet(data=PairSystemLocationLongForTree,
panel = "chromosome",
geom=geom_tile,
mapping=aes(x=chromosomes, fill=chromosomes2),
width=0.7)+
scale_fill_manual(values = c("#8c510a","#01665e"), name="chromosomes")+
##
new_scale_fill()+
geom_facet(data=SelectedPairDistances,
panel="location",
geom=geom_tile,
mapping=aes(x=plasmid, fill=plasmid2),
width=0.7)+
scale_fill_manual(values = c("#fdb462","#b3de69"), name="location")+
geom_facet(
panel="Distance",
data = SelectedPairDistances,
geom = geom_col,
aes(x = distance),
orientation = 'y',
color = "#6a3d9a",
width=1)+
theme_tree2()
PairPlot2<-facet_widths(PairPlot, widths = c(1, 0.3,0.2,0.2,0.7))
return(PairPlot2)
}
#draw and save
for (i in 1:nrow(SystemsSignif))
{
treeplot<-DrawPairTree(SystemsSignif[i,"System.I"],SystemsSignif[i,"System.II"])
ggsave(paste(SystemsSignif[i,"System.I"],SystemsSignif[i,"System.II"],"tree_with_distances.png",sep="_"),
plot=treeplot,path=folderForOutput,
width=30,height=40,dpi =400,units="cm")
}
library(readxl)
library(dplyr)
library(tidyr)
# library(ggplot2)
# library(ggnetwork)
# library(ggpubr)
library(igraph)
path<-getwd()
setwd(path)
setwd("../")
######
#create folder to output figures
folderForResults<-"./figures/all_datasets_interaction_graph"
if (!dir.exists(folderForResults)){
dir.create(folderForResults)
}else{
print("dir exists")
}
###Read xls files for all five datasets
datasets<-c("pseu","baci","burk","enter")
postfix<-"_pagel_all_results_with_direction_0.01.xlsx"
files<-paste("./data/",datasets,postfix,sep="")
files<-c(files,"./data/Ecoli_pagel_all_results_with_direction.xlsx")
CorrelData=lapply(files,read_excel)
names(CorrelData)<-c(datasets,"ecoli")
CorelDataDf<-data_frame(id = names(CorrelData), CorrelData) %>%
unnest(cols = c(CorrelData))
CorelDataDf$sysA<-ifelse(CorelDataDf$System.I == order(CorelDataDf$System.I,CorelDataDf$System.II)[1],
CorelDataDf$System.I, CorelDataDf$System.II)
CorelDataDf$sysB<-ifelse(CorelDataDf$System.II == order(CorelDataDf$System.I,CorelDataDf$System.II)[2],
CorelDataDf$System.II, CorelDataDf$System.I)
######
#read raw data on system co-occurence
rawfiles<-paste0("./data/merged_",datasets,"3.csv")
rawfiles<-c(rawfiles,"./data/26k_Ecoli_with_prophages.csv")
RawData<-lapply(rawfiles,read.csv)
names(RawData)<-names(CorrelData)
RawDataDf<-data_frame(id = names(RawData), RawData) %>%
unnest(cols = c(RawData))
RawDataDf$defense_system2<-ifelse(is.na(RawDataDf$defense_system2),
RawDataDf$defense_system,
RawDataDf$defense_system2)
RawDataDfRed<-RawDataDf[,c("id","start","end","genome","defense_system2")]
##generate counts for nodes
SystemCountsDf<-RawDataDf[,c("id","genome","defense_system2")] %>%
group_by(id,defense_system2) %>% count()
######
#generate graph for each dataset
generate_graph<-function(dataset)
{
#dataset<-"ecoli"
# layparam<-0.0000001
DatasetCorelDf<-subset(CorelDataDf,CorelDataDf$id == dataset &
CorelDataDf$Benjamini.Hochberg =="Y")
DatasetCorelDf$signif<-ifelse(is.na(DatasetCorelDf$Bonferroni),"BH","B")
count_coocurrences<-function(systs)
{
sysA<-systs[1]
sysB<-systs[2]
# sysA<-unlist(DatasetCorelDf[1,"sysA"])
# sysB<-unlist(DatasetCorelDf[1,"sysB"])
InitialCounts<-RawDataDf[RawDataDf$id==dataset & RawDataDf$defense_system2 %in% c(sysA,sysB),] %>%
group_by(genome) %>% summarise(sysc=length(unique(defense_system2)))
count<-nrow(InitialCounts[InitialCounts$sysc==2,])
return(count)
}
DatasetCorelDf$CooccurCounts<-apply(DatasetCorelDf[,c("sysA","sysB")],MARGIN=1,count_coocurrences)
# ######Getting data counts
# ###Get co-occurrences and total system counts in one table
# InteractionToSave<-DatasetCorelDf[,c(2:4,16,10,11,20,5:9)]
# write.table(InteractionToSave,
#             file="./data/interaction_graph_stat/ecoli_edges_descriptions.tsv",
#             row.names = F,
#             quote =F,
#             sep = "\t")
#
# ####calculate the degrees of nodes in the graph
# nodesalllong<-data.frame(sys=c(DatasetCorelDf$sysA,
#                                DatasetCorelDf$sysB),
#                          signif=rep(DatasetCorelDf$signif,2),
#                          dir=rep(DatasetCorelDf$direction,2))
# nodesdegreelongAllsig<-nodesalllong %>% group_by(sys,dir)%>%
#   summarize(count=n())
# nodedegreeBH<-spread(nodesdegreelongAllsig,key=dir,value = count)
# nodesdegreelongBsig<-nodesalllong[nodesalllong$signif=="B",] %>% group_by(sys,dir)%>%
#   summarize(count=n())
# nodedegreeB<-spread(nodesdegreelongBsig,key=dir,value = count)
# NodeDegreeFull<-merge(nodedegreeB,nodedegreeBH, by = "sys",all = T)
# colnames(NodeDegreeFull)<-c("System","MutExclusive.B","Co-occuring.B",
#                             "MutExclusive.BH","Co-occuring.BH")
# write.table(NodeDegreeFull,file="./data/interaction_graph_stat/ecoli_node_degree.tsv",
#             sep="\t",row.names = F, quote =F)
########
edges<-DatasetCorelDf[,c("sysA","sysB","direction","signif","CooccurCounts")]
edges$direction<-as.character(edges$direction)
names(edges)<-c("from","to","direction","type","weight")
nodes<-SystemCountsDf[SystemCountsDf$id ==dataset &
SystemCountsDf$defense_system2 %in% c(DatasetCorelDf$sysA,
DatasetCorelDf$sysB),c(2:3)]
names(nodes)<-c("id","count")
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=F)
#get direction color
dircolors <- c("#35978f","#bf812d")
names(dircolors)<-c("-1","1")
E(net)$color <- dircolors[E(net)$direction]
V(net)$size <-log(V(net)$count)/log(max(V(net)$count))*9
E(net)$width<-E(net)$weight/max(E(net)$weight)*3+0.5
E(net)$lty<-ifelse(E(net)$type == "BH",3,1)
# lay<-layout_with_fr(net,
#                     weights = log2(E(net)$width),
#                     niter=1000)#layparam)
#lay<-layout_with_graphopt(net, charge=layparam)
png(file=paste0(folderForResults,"/",dataset,"_pagel_graph.png"),
width=19, height=19, res=300,units = "cm")
svg(file=paste0(folderForResults,"/",dataset,"_pagel_graph.png"),
width=19, height=19, res=300,units = "cm")
plot(net,edge.arrow.size=.4,
vertex.label.color="gray20",
vertex.label.family="ArielMT",
vertex.frame.color = "#c7e9b4",
vertex.color ="#ffffd9",
vertex.label.cex=log(V(net)$count)/log(max(V(net)$count))/3.5,
layout = layout_in_circle)
legend(x="bottomleft", c("Mutually exclusive","Co-occuring"), pch=21,
col="#777777", pt.bg=dircolors, pt.cex=.8, cex=.4, bty="n", ncol=1)
dev.off()
#######
lay<-layout_with_fr(net,
weights = E(net)$width)
png(file=paste0(folderForResults,"/",dataset,"_pagel_graph_fr.png"),
width=19, height=19, res=300,units = "cm")
plot(net,edge.arrow.size=.4,
vertex.label.color="gray20",
vertex.label.family="ArielMT",
vertex.frame.color = "#c7e9b4",
vertex.color ="#ffffd9",
vertex.label.cex=log(V(net)$count)/log(max(V(net)$count))/3,
layout = lay)
legend(x="bottomleft", c("Mutually exclusive","Co-occuring"), pch=21,
col="#777777", pt.bg=dircolors, pt.cex=.8, cex=.4, bty="n", ncol=1)
dev.off()
}
generate_graph("pseu")
setwd("/net/intdev/cbb01/garushyants/defence_systems_cooccurance/github/scripts")
library(readxl)
library(dplyr)
library(tidyr)
# library(ggplot2)
# library(ggnetwork)
# library(ggpubr)
library(igraph)
path<-getwd()
setwd(path)
setwd("../")
######
#create folder to output figures
folderForResults<-"./figures/all_datasets_interaction_graph"
if (!dir.exists(folderForResults)){
dir.create(folderForResults)
}else{
print("dir exists")
}
###Read xls files for all five datasets
datasets<-c("pseu","baci","burk","enter")
postfix<-"_pagel_all_results_with_direction_0.01.xlsx"
files<-paste("./data/",datasets,postfix,sep="")
files<-c(files,"./data/Ecoli_pagel_all_results_with_direction.xlsx")
CorrelData=lapply(files,read_excel)
names(CorrelData)<-c(datasets,"ecoli")
CorelDataDf<-data_frame(id = names(CorrelData), CorrelData) %>%
unnest(cols = c(CorrelData))
CorelDataDf$sysA<-ifelse(CorelDataDf$System.I == order(CorelDataDf$System.I,CorelDataDf$System.II)[1],
CorelDataDf$System.I, CorelDataDf$System.II)
CorelDataDf$sysB<-ifelse(CorelDataDf$System.II == order(CorelDataDf$System.I,CorelDataDf$System.II)[2],
CorelDataDf$System.II, CorelDataDf$System.I)
######
#read raw data on system co-occurence
rawfiles<-paste0("./data/merged_",datasets,"3.csv")
rawfiles<-c(rawfiles,"./data/26k_Ecoli_with_prophages.csv")
RawData<-lapply(rawfiles,read.csv)
names(RawData)<-names(CorrelData)
RawDataDf<-data_frame(id = names(RawData), RawData) %>%
unnest(cols = c(RawData))
RawDataDf$defense_system2<-ifelse(is.na(RawDataDf$defense_system2),
RawDataDf$defense_system,
RawDataDf$defense_system2)
RawDataDfRed<-RawDataDf[,c("id","start","end","genome","defense_system2")]
##generate counts for nodes
SystemCountsDf<-RawDataDf[,c("id","genome","defense_system2")] %>%
group_by(id,defense_system2) %>% count()
######
#generate graph for each dataset
generate_graph<-function(dataset)
{
#dataset<-"ecoli"
# layparam<-0.0000001
DatasetCorelDf<-subset(CorelDataDf,CorelDataDf$id == dataset &
CorelDataDf$Benjamini.Hochberg =="Y")
DatasetCorelDf$signif<-ifelse(is.na(DatasetCorelDf$Bonferroni),"BH","B")
count_coocurrences<-function(systs)
{
sysA<-systs[1]
sysB<-systs[2]
# sysA<-unlist(DatasetCorelDf[1,"sysA"])
# sysB<-unlist(DatasetCorelDf[1,"sysB"])
InitialCounts<-RawDataDf[RawDataDf$id==dataset & RawDataDf$defense_system2 %in% c(sysA,sysB),] %>%
group_by(genome) %>% summarise(sysc=length(unique(defense_system2)))
count<-nrow(InitialCounts[InitialCounts$sysc==2,])
return(count)
}
DatasetCorelDf$CooccurCounts<-apply(DatasetCorelDf[,c("sysA","sysB")],MARGIN=1,count_coocurrences)
# ######Getting data counts
# ###Get co-occurrences and total system counts in one table
# InteractionToSave<-DatasetCorelDf[,c(2:4,16,10,11,20,5:9)]
# write.table(InteractionToSave,
#             file="./data/interaction_graph_stat/ecoli_edges_descriptions.tsv",
#             row.names = F,
#             quote =F,
#             sep = "\t")
#
# ####calculate the degrees of nodes in the graph
# nodesalllong<-data.frame(sys=c(DatasetCorelDf$sysA,
#                                DatasetCorelDf$sysB),
#                          signif=rep(DatasetCorelDf$signif,2),
#                          dir=rep(DatasetCorelDf$direction,2))
# nodesdegreelongAllsig<-nodesalllong %>% group_by(sys,dir)%>%
#   summarize(count=n())
# nodedegreeBH<-spread(nodesdegreelongAllsig,key=dir,value = count)
# nodesdegreelongBsig<-nodesalllong[nodesalllong$signif=="B",] %>% group_by(sys,dir)%>%
#   summarize(count=n())
# nodedegreeB<-spread(nodesdegreelongBsig,key=dir,value = count)
# NodeDegreeFull<-merge(nodedegreeB,nodedegreeBH, by = "sys",all = T)
# colnames(NodeDegreeFull)<-c("System","MutExclusive.B","Co-occuring.B",
#                             "MutExclusive.BH","Co-occuring.BH")
# write.table(NodeDegreeFull,file="./data/interaction_graph_stat/ecoli_node_degree.tsv",
#             sep="\t",row.names = F, quote =F)
########
edges<-DatasetCorelDf[,c("sysA","sysB","direction","signif","CooccurCounts")]
edges$direction<-as.character(edges$direction)
names(edges)<-c("from","to","direction","type","weight")
nodes<-SystemCountsDf[SystemCountsDf$id ==dataset &
SystemCountsDf$defense_system2 %in% c(DatasetCorelDf$sysA,
DatasetCorelDf$sysB),c(2:3)]
names(nodes)<-c("id","count")
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=F)
#get direction color
dircolors <- c("#35978f","#bf812d")
names(dircolors)<-c("-1","1")
E(net)$color <- dircolors[E(net)$direction]
V(net)$size <-log(V(net)$count)/log(max(V(net)$count))*9
E(net)$width<-E(net)$weight/max(E(net)$weight)*3+0.5
E(net)$lty<-ifelse(E(net)$type == "BH",3,1)
# lay<-layout_with_fr(net,
#                     weights = log2(E(net)$width),
#                     niter=1000)#layparam)
#lay<-layout_with_graphopt(net, charge=layparam)
png(file=paste0(folderForResults,"/",dataset,"_pagel_graph.png"),
width=19, height=19, res=300,units = "cm")
svg(file=paste0(folderForResults,"/",dataset,"_pagel_graph.png"),
width=19, height=19)
plot(net,edge.arrow.size=.4,
vertex.label.color="gray20",
vertex.label.family="ArielMT",
vertex.frame.color = "#c7e9b4",
vertex.color ="#ffffd9",
vertex.label.cex=log(V(net)$count)/log(max(V(net)$count))/3.5,
layout = layout_in_circle)
legend(x="bottomleft", c("Mutually exclusive","Co-occuring"), pch=21,
col="#777777", pt.bg=dircolors, pt.cex=.8, cex=.4, bty="n", ncol=1)
dev.off()
#######
lay<-layout_with_fr(net,
weights = E(net)$width)
png(file=paste0(folderForResults,"/",dataset,"_pagel_graph_fr.png"),
width=19, height=19, res=300,units = "cm")
plot(net,edge.arrow.size=.4,
vertex.label.color="gray20",
vertex.label.family="ArielMT",
vertex.frame.color = "#c7e9b4",
vertex.color ="#ffffd9",
vertex.label.cex=log(V(net)$count)/log(max(V(net)$count))/3,
layout = lay)
legend(x="bottomleft", c("Mutually exclusive","Co-occuring"), pch=21,
col="#777777", pt.bg=dircolors, pt.cex=.8, cex=.4, bty="n", ncol=1)
dev.off()
}
generate_graph("pseu")
generate_graph("enter")
generate_graph("ecoli")
generate_graph("burk")
generate_graph("baci")
#
#
# PlNet<-ggnetwork(net, layout = in_circle())
# PlNet$linewidth<-PlNet$weight /max(PlNet$weight,na.rm=T)
#
# ggplot(PlNet, aes(x=x,y=y,yend=yend,xend=xend)) +
#   geom_edges(aes(linetype = type,
#                  color = as.factor(direction),
#                  linewidth=linewidth))+
#   geom_nodes(aes(size=log(count)/log(max(count))),
#              color = "#c7e9b4",pch=21,
#              fill="#ffffd9")+
#   geom_nodetext(aes(label = name),
#                 family = "ArialMT")+
#   theme_blank()
